문자열

#incldue <string>

string str;

str.find("찾고 싶은 문자열", 찾고자 하는 index 번호)

str.substr(자르고 싶은 문자열 index, 몇개 자를지 개수) => return 값이 string

to_string(int) =>  int형 변수를 string으로 변경 => return 값 string

atoi(str) => string 변수를 int형으로 변경

벡터

#include <vector>

vector<int> vec => 기본형
vector<pair<int,int>> => 키 값이 두개 인 벡터
=> 이 경우는 보통 struct Node{  이렇게 구조체를 만들어서 vector<Node> vec로 사용한다
		 int y,x;
		};  

vec.begin() => 처음 부분, vec.end() => 끝 부분
vec.push_back(자료형) => 뒤에다가 삽입
vec.pop_back() => 뒤에 꺼 빼기

정렬
#include <algorithm>
=> quick sort 알고리즘을 사용하기때문에 빠르다

min 함수나 max 함수도 이 라이브러리에 포함되어 있음

기본 배열형 정렬 
int arr[10] = {2,4,1,5,6,9,8,10,3,7};
이 있을 경우 오름차순으로 정렬 하는 방법
sort(arr,arr+10) => 기본이 오름차순이기 때문에 이렇게 사용

내림차순으로 정렬할 경우
=> sort(arr,arr+10,greater<int>());

벡터 정렬
-> sort(vec.begin(), vec.end());
벡터를 원하는 정렬로 할 경우는 compare 함수 생성
=> 예시로 구조체 사용
int compare(Node a, Node b){
	if(a.y < b.y) return 1;
	if(a.y > b.y) return 0;
	return 0;
}
=> 구조체 y변수 기준으로 오름차순으로 정렬
-> sort(vec.begin(),vec.end(),compare);

수학
#include <cmath>

반올림 => round(float형 자료형, 몇번째 자리에서 올릴지);
제곱근 => sqrt(int형)
n제곱 => pow(제곱하길 원하는 숫자, n) => 원하는 숫자의 n제곱

% => 나머지, / => 몫

큐
#include <queue>

벡터랑 사용법 동일
=> 하지만 push와 pop만 존재
=> push -> 뒤로 삽입, pop -> 앞으로 빼기

해시
#include <unordered_map>
사용법
unordered_map<int,int> hs;
=> int가 key 값. 뒤에 int가 value 값
즉 만약 string 형의 값을 찾고 싶다면

unordered_map<string,int> hs;
hs["harim"] = 1;

이렇게 삽입하면 harim이 존재하는지, 어디에 존재하는지 여부를 알 수 있음
=> 잘 안 나옴 ㅋ

bfs 기본 구조

void bfs(int y, int x){
 queue<Node> que;
 que.push({y,x});
 vistied[y][x]= 1;

  while(!que.empty()){
	y = que.front().y;
	x = que.front().x;
	que.pop();
	
	for(itn i=0;i<4;i++){
	  int ny = y+dir[i][0];
	  int nx = x=dir[i][1];
  	  
 	if(ny<0|| ny>=N || nx<0 || nx>=N) continue;
 	if(visited[ny][nx]!=0) continue;
	visited[ny][nx] =1;
	que.push({ny,nx});
	}
     }
}

dfs 기본 구존

void dfs(int y, int x){
  visited[y][x]= 1;

  for(int i=0;i<4;i++){
   int ny = y+dir[i][0];
   int nx = x=dir[i][1];
  	  
    if(ny<0|| ny>=N || nx<0 || nx>=N) continue;
    if(visited[ny][nx]!=0) continue;
    
    dfs(ny,nx);
  }
}


    
